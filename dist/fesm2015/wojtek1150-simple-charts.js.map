{"version":3,"file":"wojtek1150-simple-charts.js","sources":["ng://@wojtek1150/simple-charts/helpers/index.ts","ng://@wojtek1150/simple-charts/models/line-chart.ts","ng://@wojtek1150/simple-charts/components/line-chart/line-chart.component.ts","ng://@wojtek1150/simple-charts/models/multi-line-chart.ts","ng://@wojtek1150/simple-charts/components/multi-line-chart/multi-line-chart.component.ts","ng://@wojtek1150/simple-charts/charts.module.ts"],"sourcesContent":["export const daysDiff = (start, end) => Math.round((end - start) / (1000 * 60 * 60 * 24));\nexport const order = (items, key) => items.sort((a, b) => (a[key] > b[key]) ? 1 : ((b[key] > a[key]) ? -1 : 0));\nexport const max = (items, key) => items.reduce((a, b) => a[key] >= b[key] ? a : b, {});\nexport const axisYScale = (value): { scaleY: [number, number, number], maxValue: number } => {\n  if (value <= 15) {\n    return { maxValue: 15, scaleY: [15, 10, 5] };\n  }\n  if (value <= 30) {\n    return { maxValue: 30, scaleY: [30, 20, 10] };\n  }\n  if (value <= 45) {\n    return { maxValue: 45, scaleY: [45, 30, 15] };\n  }\n  if (value <= 60) {\n    return { maxValue: 60, scaleY: [60, 40, 20] };\n  }\n  if (value <= 120) {\n    return { maxValue: 120, scaleY: [120, 80, 40] };\n  }\n  const maxValue = Math.ceil(value / 100) * 100;\n  const step = Math.ceil(maxValue / 3 / 10) * 10;\n  return { maxValue, scaleY: [maxValue, maxValue - step, maxValue - step - step] };\n};\n","import { daysDiff, order } from '../helpers';\n\nexport interface LineChartPoint<T> {\n  value: number;\n  time: T;\n}\n\nexport interface LineCartPillar {\n  startValue: number; // xScale - point[-1].value * 100%\n  endValue: number; // xScale - point[0].value * 100%\n  startPosition: number; // (days - point[-1].start)\n  endPosition: number; // (days - point[0].start)\n  width: number; // (end - start) / days * 100%\n}\n\nexport class LineChart {\n  points: LineChartPoint<Date>[] = [];\n  pillars: LineCartPillar[] = [];\n  xScale: number; // Max point value + 10%\n  days: number; // no of days between fist and last point\n  startPoint: Date; // Newest point\n  endPoint: Date; // Newest point\n\n  constructor(items: LineChartPoint<Date | number | string>[]) {\n    if (items && items.length > 0) {\n      this.points = order(items.map(i => ({ value: i.value, time: new Date(i.time) })), 'time');\n      this.xScale = this.points.reduce((a, b) => a.value >= b.value ? a : b, { value: 0 }).value * 1.1;\n      this.startPoint = this.points.slice(0, 1)[0].time;\n      this.endPoint = this.points.slice(-1)[0].time;\n      this.days = daysDiff(this.startPoint, this.endPoint);\n      this.pillars = this.points.map((point, index, array) => {\n        if (index === 0) { // first should be skipped. then all next end is current, start is previous, so don't make calc for fist\n          return {} as LineCartPillar;\n        }\n        const item = {\n          startValue: Math.floor(array[index - 1].value / this.xScale * 100),\n          endValue: Math.floor(point.value / this.xScale * 100),\n          startPosition: daysDiff(this.startPoint, array[index - 1].time),\n          endPosition: daysDiff(this.startPoint, point.time)\n        };\n        return {\n          ...item,\n          width: Math.floor((item.endPosition - item.startPosition) / this.days * 100)\n        };\n      }).slice(1);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { LineCartPillar, LineChart, LineChartPoint } from '../../models/line-chart';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'lib-line-chart',\n  templateUrl: './line-chart.component.html',\n  styleUrls: ['./line-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LineChartComponent {\n  chart: LineChart;\n\n  @Input() set points(value: LineChartPoint<Date | number | string>[]) {\n    this.chart = new LineChart(value);\n  }\n\n  constructor(private sanitizer: DomSanitizer) { }\n\n  shape(pillar: LineCartPillar) {\n    const polygon = `polygon(0 ${100 - pillar.startValue}%, 100% ${100 - pillar.endValue}%, 100% 100%, 0% 100%)`;\n    return this.sanitizer.bypassSecurityTrustStyle(polygon);\n  }\n\n  line(pillar: LineCartPillar) {\n    const polygon = `polygon(0 ${100 - pillar.startValue}%, 100% ${100 - pillar.endValue}%, 100% ${102 - pillar.endValue}%, 0 ${102 - pillar.startValue}%)`;\n    return this.sanitizer.bypassSecurityTrustStyle(polygon);\n  }\n\n}\n","import { axisYScale, max, order } from '../helpers';\n\nexport enum MultiLineChartLineType {\n  normal = 'normal',\n  dashed = 'dashed',\n  points = 'points'\n}\n\nexport enum MultiLineChartValueType {\n  numbers = 'numbers',\n  percents = 'percents'\n}\n\nexport interface MultiLineChartLineData {\n  label: string;\n  lineType: MultiLineChartLineType;\n  valueType: MultiLineChartValueType;\n}\n\nexport interface MultiLineChartPillar {\n  shapeStart: number; // Percents\n  shapeEnd: number; // Percents\n  x: number;\n  y: number;\n}\n\nexport interface MultiLineChartLineInput extends MultiLineChartLineData {\n  items: {\n    x: number;\n    y: number;\n  }[]\n}\n\nexport interface MultiLineChartLineOutput extends MultiLineChartLineData {\n  items: MultiLineChartPillar[];\n}\n\nexport class MultiLineChart {\n  maxValue: number;\n  scaleY: [number, number, number];\n  scaleX: number[];\n  lines: MultiLineChartLineOutput[] = [];\n\n  constructor(data: MultiLineChartLineInput[]) {\n    if (data && data.length > 0) {\n      const valueTyped = data.filter(line => line.valueType === MultiLineChartValueType.numbers);\n      if (!valueTyped.length) {\n        throw Error('You must provide at least one number type line');\n      }\n      const maxItems = valueTyped.map(line => max(line.items, 'y'));\n      const scale = axisYScale(max(maxItems, 'y').y);\n      this.maxValue = scale.maxValue;\n      this.scaleY = scale.scaleY;\n      this.scaleX = data[0].items.map(i => i.x);\n      this.lines = data.map(line => ({\n        label: line.label,\n        lineType: line.lineType,\n        valueType: line.valueType,\n        items: prepareShapes(line.items, this.maxValue, line.valueType === MultiLineChartValueType.percents)\n      }));\n    }\n  }\n}\n\nexport function prepareShapes(items: { x: number, y: number }[], maxValue: number, percents: boolean): MultiLineChartPillar[] {\n  return order(items, 'x')\n    .map((point, index, array) => {\n      if (index === 0) { return; }\n      return {\n        x: point.x,\n        y: point.y,\n        shapeStart: percents ? array[index - 1].y : Math.floor(array[index - 1].y / maxValue * 100),\n        shapeEnd: percents ? point.y : Math.floor(point.y / maxValue * 100),\n      };\n    })\n    .slice(1);\n}\n\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MultiLineChart, MultiLineChartLineInput, MultiLineChartPillar } from '../../models/multi-line-chart';\n\n@Component({\n  selector: 'lib-multi-line-chart',\n  templateUrl: './multi-line-chart.component.html',\n  styleUrls: ['./multi-line-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MultiLineChartComponent {\n  chart: MultiLineChart;\n\n  @Input() set data(value: MultiLineChartLineInput[]) {\n    this.chart = new MultiLineChart(value);\n    console.log('MultiLineChartComponent', value, this.chart);\n  }\n\n  constructor(private sanitizer: DomSanitizer) { }\n\n  segmentPath(pillar: MultiLineChartPillar) {\n    const polygon = `polygon(0 ${100 - pillar.shapeStart}%, 100% ${100 - pillar.shapeEnd}%, 100% ${101 - pillar.shapeEnd}%, 0 ${101 - pillar.shapeStart}%)`;\n    return this.sanitizer.bypassSecurityTrustStyle(polygon);\n  }\n\n  dotLocation(pillar: MultiLineChartPillar) {\n    return this.sanitizer.bypassSecurityTrustStyle(`${pillar.shapeEnd}%`);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LineChartComponent } from './components/line-chart/line-chart.component';\nimport { MultiLineChartComponent } from './components/multi-line-chart/multi-line-chart.component';\n\n@NgModule({\n  declarations: [\n    LineChartComponent,\n    MultiLineChartComponent\n  ],\n  imports: [CommonModule],\n  exports: [\n    LineChartComponent,\n    MultiLineChartComponent\n  ]\n})\nexport class ChartsModule {}\n"],"names":[],"mappings":"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"}